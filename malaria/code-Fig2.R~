##
##  R code to generate Figure 3 of main text to
##  "A second-order iterated smoothing"
##  by D. Nguyen and E. L. Ionides.
##

require(is2)

binary.file <- "malaria-50-1000.rda"
if (file.exists(binary.file)){
  load(binary.file)
} else {
{
CORES <- 50     ## number of parallel processes
JOBS <- 200      ## number of estimation runs
NMIF <- 50      ## number of IF iterations per estimation run
NP <- 1000     ## number of particles in pfilter operations
NLIK <- 10      ## number of likelihood evaluations
NPLIK <- 10000  ## number of particles in likelihood evaluation
## for mif computations:
IC.LAG <- 100   ## fixed smoothing lag for initial conditions

 require(doParallel)
registerDoParallel(CORES)

#patch relapse.c
if(!is.loaded("relapse")){
  system('R CMD SHLIB relapse.c')
  dyn.load("relapse.so")
}

# define scaling functions
logit <- function(p){log(p/(1-p))}		# maps interval [0,1] to [-infty,infty]
expit <- function(p){1/(1+exp(-p))}		# reverse map of logit()

# import data
dat <- read.csv("Kutch-data.csv")							# case + rainfall data
census  <- read.csv("Kutch-census.csv",comment.char="#")	# population data
time.dat <- dat$time[which(dat$time>1987)]					# t0 -> Jan 1987
pv.dat <- dat$pv[which(dat$time>1987)]
pop.year <- census[which(census$Year>=1987),1]
pop.dat <- census[which(census$Year>=1987),2]
rain.dat <- dat$rainfall[which(dat$time>1986)]				# rain data begins a year before (Jan 1986)
# replace NA values in rainfall data by monthly averages
nn <- length(rain.dat)
for(i in 1:12){
  ix <- seq(i,nn,12)
  avr <- mean(rain.dat[ix],na.rm=TRUE)
  rain.dat[ix][is.na(rain.dat[ix])] <- avr
}
# accumulate rainfall (adding preceding 4 months of rain)
rain <- rain.dat[9:296]										# use data from Sep 1986
nn <- length(pv.dat)
acrain.dat <- rep(0,nn)
for(i in 1:nn) acrain.dat[i] <- sum(rain[i:(i+3)])
# remove Jan-Jun & Nov-Dec rain (for max correlation with Pv)
for(i in seq(1,nn,12)) acrain.dat[c(i:(i+5),(i+10):(i+11))] <- 0
acrain.dat <- acrain.dat[1:nn]		# reset to original length

#compute classical basis as seasonality
tbasis.step <- 1/360
tbasis <- seq(min(time.dat)-0.1,max(time.dat)+0.1,by=tbasis.step)
nbasis <- 6
basis <- periodic.bspline.basis(tbasis,nbasis=nbasis,degree=3,period=1)
colnames(basis) <- paste("season",1:nbasis,sep="")

# smoothen (decadal) population data
pop.spline <- smooth.spline(x=pop.year,y=pop.dat)
pop <- predict(pop.spline,tbasis)$y
dpopdt <- c(0,diff(pop))/tbasis.step

# smoothen rainfall data by linear interpolation (time points left-shifted one month)
acrain <- approx(x=time.dat-1/12,y=acrain.dat,xout=tbasis,rule=2)$y
# define covariates
covariate <- cbind(pop=pop,dpopdt=dpopdt,rainfall=(acrain-mean(acrain))/sd(acrain),basis=basis)
######################################
# build pomp object for SEIH^3QS model
######################################
po <- pomp(
  data = data.frame(cbind(time=time.dat,pv=pv.dat)),
  times = "time",
  t0 = 2*time.dat[1] - time.dat[2],
  tcovar = tbasis,
  covar = covariate,
  statenames = c("cases","err","S","E","I","Q","H1","H2","H3","K","F","W"),
  paramnames = c("log.sigOBS","log.muEI","log.muIH","log.muHI","log.muIQ","log.muIS","log.muQS",
    			 "log.tau","log.sigPRO","logit.rho","logit.q","logit.br","delta","b1","logit.S0",
				 "logit.E0","logit.I0","logit.Q0","logit.H10","logit.H20","logit.H30","log.K0","log.F0"),
  covarnames = c("pop","dpopdt","rainfall","season1"),
  zeronames = c("cases","W","err"),
  obsnames = c("pv"),
  rprocess = euler.sim(step.fun="SEIH3QS",delta.t=2/365),
  rmeasure = "nbinom_rmeasure",
  dmeasure = "nbinom_dmeasure",
  initializer = function(params,t0,statenames,covars,...)
  {
    # untransform needed parameters
    snames <-c("cases","err","S","E","I","Q","H1","H2","H3","K","F","W")
    frac1 <- expit(params[c("logit.S0","logit.E0","logit.I0","logit.Q0","logit.H10","logit.H20","logit.H30")])
    frac2 <- exp(params[c("log.K0","log.F0")])
    x0 <- numeric(length(snames))
    names(x0) <- snames
    x0[c("S","E","I","Q","H1","H2","H3","K","F")] <- c(round(covars["pop"]*frac1/sum(frac1)),frac2)
    x0
  }
)



#########################
# run IF1 
#########################


METHOD <- "mif"
IC.LAG <- 1000
tic <- Sys.time()
mpar1 <- foreach(
  i=1:JOBS,
  .packages='is2',
  .inorder=FALSE
) %dopar% {
  
  set.seed(345+i)
  


# randomize (and transform where needed) initial parameter values
# ("b1...b6" are untransformed, "delta" and "initpop" not estimated)
par.ini.tr <- c(
  log.muEI=log(24), log.muIH=log(runif(1,1,5)), log.muHI=log(runif(1,1,5)),
  log.muIQ=log(runif(1,1,2)), log.muIS=log(runif(1,0.5,2)), log.muQS=log(runif(1,10,20)),
  log.sigPRO=log(runif(1,0.1,0.5)), log.sigOBS=log(runif(1,0.1,0.5)), log.tau=log(runif(1,0.1,0.5)),
  log.K0=log(runif(1,0.1,0.5)), log.F0=log(runif(1,0.1,0.5)),
  logit.rho=logit(runif(1,0.001,0.01)), logit.q=logit(0.001), logit.br=logit(runif(1,0.5,0.9)),
  logit.S0=0, logit.E0=0, logit.I0=0, logit.Q0=0, logit.H10=0, logit.H20=0, logit.H30=0,
  b1=runif(1,-5,5), b2=runif(1,-5,5), b3=runif(1,-5,5), b4=runif(1,-5,5),
  b5=runif(1,-5,5), b6=runif(1,-5,5), delta=0.02, initpop=1163607
)
# randomize S0,E0,I0,Q0,H0 with constraint S0+E0+I0+Q0+H0=1
S0  <- runif(1,0,1);
E0  <- runif(1,0,1)
I0  <- runif(1,0,1)
Q0  <- runif(1,0,1)
H10 <- runif(1,0,1)
H20 <- runif(1,0,1)
H30 <- runif(1,0,1)
fac <- sum(c(S0,E0,I0,Q0,H10,H20,H30))
S0 <- S0/fac; E0 <- E0/fac; I0 <- I0/fac; Q0 <- Q0/fac; H10 <- H10/fac; H20 <- H20/fac; H30 <- H30/fac
par.ini.tr[c("logit.S0","logit.E0","logit.I0","logit.Q0","logit.H10","logit.H20","logit.H30")] <- logit(c(S0,E0,I0,Q0,H10,H20,H30))

# log-transformed parameters

log.par <- c(
  "log.muEI", "log.muIH", "log.muHI", "log.muIQ", "log.muIS", "log.muQS", "log.tau",
  "log.sigPRO", "log.sigOBS", "log.K0", "log.F0"
)
# logit-transformed parameters
logit.par <- c(
  "logit.rho", "logit.q", "logit.br", "logit.S0", "logit.E0", "logit.I0", "logit.Q0",
  "logit.H10", "logit.H20", "logit.H30"
)
# untransformed parameters
untr.par <- c("b1", "b2", "b3", "b4", "b5", "b6", "delta", "initpop")
# untransformed initial parameters
par.ini <- c(exp(par.ini.tr[log.par]),expit(par.ini.tr[logit.par]),par.ini.tr[untr.par])
names(par.ini) <- c(
  "muEI", "muIH", "muHI", "muIQ", "muIS", "muQS", "tau", "sigPRO", "sigOBS", "K0", "F0", "rho",
  "q", "br", "S0", "E0", "I0", "Q0", "H10", "H20", "H30", "b1", "b2", "b3", "b4", "b5", "b6",
  "delta", "initpop"
)

# parameters to be estimated
par.est <- c(
  "log.muEI", "log.muIH", "log.muHI", "log.muIQ", "log.muIS", "log.muQS", "log.sigPRO", "log.sigOBS",
  "log.tau", "logit.rho", "logit.q", "logit.br", "b1", "b2", "b3", "b4", "b5", "b6"
)
# initial states to be estimated
ivp.est <- c("logit.S0", "logit.E0", "logit.I0", "logit.Q0", "logit.H10", "logit.H20", "logit.H30", "log.K0", "log.F0")

# strength of random walk
sd <- rep(0,length(par.ini.tr))
names(sd) <- names(par.ini.tr)
sd[par.est] <- 0.1
sd[ivp.est] <- 2

# parameters to be held fixed at pre-assigned value
# vivax incubation period ~= 15 days (=15/365 yr); q takes a low value <<1 
par.ini.tr[c("log.muEI","logit.q")] <- c(log(24),logit(0.001))
sd[c("log.muEI","logit.q")] <- 0.000001
par.tr <- par.ini.tr

  m <- try(
    mif(
    po,
    Nmif = NMIF,
    start = par.tr,
    pars = par.est,
    ivps = ivp.est,
    rw.sd = sd,
    Np = NP,
    var.factor = 1,
    ic.lag = 10,
    cooling.type="geometric",
    cooling.fraction=0.1,		
    max.fail = 1000,
    method="mif",
    lag=0
    
  )
  )
  if(class(m)[1]=='try-error'){
    list(pomp=po,start=par.tr,ll=NA)
  } else{
    ll <- logLik(pfilter(m,Np=NPLIK))
    ll1 <-m$loglik
    list(pomp=m,start=par.tr,ll=ll, ll1=ll1)
  }
}
toc <- Sys.time()
etime1 <- toc-tic

m1.in <- rbind(sapply(mpar1,function(x)x$start))
m1.out <- rbind(sapply(mpar1,function(x)coef(x$pomp)))
m1.lik <- rbind(sapply(mpar1,function(x)x$ll))

#########################
# run IF2 
#########################


METHOD <- "mif2"
IC.LAG <- 1000
tic <- Sys.time()
mpar2 <- foreach(
  i=1:JOBS,
  .packages='is2',
  .inorder=FALSE
) %dopar% {
  
  set.seed(345+i)
  


# randomize (and transform where needed) initial parameter values
# ("b1...b6" are untransformed, "delta" and "initpop" not estimated)
par.ini.tr <- c(
  log.muEI=log(24), log.muIH=log(runif(1,1,5)), log.muHI=log(runif(1,1,5)),
  log.muIQ=log(runif(1,1,2)), log.muIS=log(runif(1,0.5,2)), log.muQS=log(runif(1,10,20)),
  log.sigPRO=log(runif(1,0.1,0.5)), log.sigOBS=log(runif(1,0.1,0.5)), log.tau=log(runif(1,0.1,0.5)),
  log.K0=log(runif(1,0.1,0.5)), log.F0=log(runif(1,0.1,0.5)),
  logit.rho=logit(runif(1,0.001,0.01)), logit.q=logit(0.001), logit.br=logit(runif(1,0.5,0.9)),
  logit.S0=0, logit.E0=0, logit.I0=0, logit.Q0=0, logit.H10=0, logit.H20=0, logit.H30=0,
  b1=runif(1,-5,5), b2=runif(1,-5,5), b3=runif(1,-5,5), b4=runif(1,-5,5),
  b5=runif(1,-5,5), b6=runif(1,-5,5), delta=0.02, initpop=1163607
)
# randomize S0,E0,I0,Q0,H0 with constraint S0+E0+I0+Q0+H0=1
S0  <- runif(1,0,1);
E0  <- runif(1,0,1)
I0  <- runif(1,0,1)
Q0  <- runif(1,0,1)
H10 <- runif(1,0,1)
H20 <- runif(1,0,1)
H30 <- runif(1,0,1)
fac <- sum(c(S0,E0,I0,Q0,H10,H20,H30))
S0 <- S0/fac; E0 <- E0/fac; I0 <- I0/fac; Q0 <- Q0/fac; H10 <- H10/fac; H20 <- H20/fac; H30 <- H30/fac
par.ini.tr[c("logit.S0","logit.E0","logit.I0","logit.Q0","logit.H10","logit.H20","logit.H30")] <- logit(c(S0,E0,I0,Q0,H10,H20,H30))

# log-transformed parameters

log.par <- c(
  "log.muEI", "log.muIH", "log.muHI", "log.muIQ", "log.muIS", "log.muQS", "log.tau",
  "log.sigPRO", "log.sigOBS", "log.K0", "log.F0"
)
# logit-transformed parameters
logit.par <- c(
  "logit.rho", "logit.q", "logit.br", "logit.S0", "logit.E0", "logit.I0", "logit.Q0",
  "logit.H10", "logit.H20", "logit.H30"
)
# untransformed parameters
untr.par <- c("b1", "b2", "b3", "b4", "b5", "b6", "delta", "initpop")
# untransformed initial parameters
par.ini <- c(exp(par.ini.tr[log.par]),expit(par.ini.tr[logit.par]),par.ini.tr[untr.par])
names(par.ini) <- c(
  "muEI", "muIH", "muHI", "muIQ", "muIS", "muQS", "tau", "sigPRO", "sigOBS", "K0", "F0", "rho",
  "q", "br", "S0", "E0", "I0", "Q0", "H10", "H20", "H30", "b1", "b2", "b3", "b4", "b5", "b6",
  "delta", "initpop"
)

# parameters to be estimated
par.est <- c(
  "log.muEI", "log.muIH", "log.muHI", "log.muIQ", "log.muIS", "log.muQS", "log.sigPRO", "log.sigOBS",
  "log.tau", "logit.rho", "logit.q", "logit.br", "b1", "b2", "b3", "b4", "b5", "b6"
)
# initial states to be estimated
ivp.est <- c("logit.S0", "logit.E0", "logit.I0", "logit.Q0", "logit.H10", "logit.H20", "logit.H30", "log.K0", "log.F0")

# strength of random walk
sd <- rep(0,length(par.ini.tr))
names(sd) <- names(par.ini.tr)
sd[par.est] <- 0.1
sd[ivp.est] <- 2

# parameters to be held fixed at pre-assigned value
# vivax incubation period ~= 15 days (=15/365 yr); q takes a low value <<1 
par.ini.tr[c("log.muEI","logit.q")] <- c(log(24),logit(0.001))
sd[c("log.muEI","logit.q")] <- 0.000001
par.tr <- par.ini.tr

  m <- try(
    mif(
    po,
    Nmif = NMIF,
    start = par.tr,
    pars = par.est,
    ivps = ivp.est,
    rw.sd = sd,
    Np = NP,
    var.factor = 1,
    ic.lag = 10,
    cooling.type="geometric",
    cooling.fraction=0.1,		
    max.fail = 1000,
    method="mif2",
    lag=0
    
  )
  )
  if(class(m)[1]=='try-error'){
    list(pomp=po,start=par.tr,ll=NA)
  } else{
    ll <- logLik(pfilter(m,Np=NPLIK))
    ll1 <-m$loglik
    list(pomp=m,start=par.tr,ll=ll, ll1=ll1)
  }
}
toc <- Sys.time()
etime2 <- toc-tic

m2.in <- rbind(sapply(mpar2,function(x)x$start))
m2.out <- rbind(sapply(mpar2,function(x)coef(x$pomp)))
m2.lik <- rbind(sapply(mpar2,function(x)x$ll))

#########################
# run IS2 
#########################


METHOD <- "is2"
IC.LAG <- 1000
tic <- Sys.time()
mpar3 <- foreach(
  i=1:JOBS,
  .packages='is2',
  .inorder=FALSE
) %dopar% {
  
  set.seed(345+i)
  


# randomize (and transform where needed) initial parameter values
# ("b1...b6" are untransformed, "delta" and "initpop" not estimated)
par.ini.tr <- c(
  log.muEI=log(24), log.muIH=log(runif(1,1,5)), log.muHI=log(runif(1,1,5)),
  log.muIQ=log(runif(1,1,2)), log.muIS=log(runif(1,0.5,2)), log.muQS=log(runif(1,10,20)),
  log.sigPRO=log(runif(1,0.1,0.5)), log.sigOBS=log(runif(1,0.1,0.5)), log.tau=log(runif(1,0.1,0.5)),
  log.K0=log(runif(1,0.1,0.5)), log.F0=log(runif(1,0.1,0.5)),
  logit.rho=logit(runif(1,0.001,0.01)), logit.q=logit(0.001), logit.br=logit(runif(1,0.5,0.9)),
  logit.S0=0, logit.E0=0, logit.I0=0, logit.Q0=0, logit.H10=0, logit.H20=0, logit.H30=0,
  b1=runif(1,-5,5), b2=runif(1,-5,5), b3=runif(1,-5,5), b4=runif(1,-5,5),
  b5=runif(1,-5,5), b6=runif(1,-5,5), delta=0.02, initpop=1163607
)
# randomize S0,E0,I0,Q0,H0 with constraint S0+E0+I0+Q0+H0=1
S0  <- runif(1,0,1);
E0  <- runif(1,0,1)
I0  <- runif(1,0,1)
Q0  <- runif(1,0,1)
H10 <- runif(1,0,1)
H20 <- runif(1,0,1)
H30 <- runif(1,0,1)
fac <- sum(c(S0,E0,I0,Q0,H10,H20,H30))
S0 <- S0/fac; E0 <- E0/fac; I0 <- I0/fac; Q0 <- Q0/fac; H10 <- H10/fac; H20 <- H20/fac; H30 <- H30/fac
par.ini.tr[c("logit.S0","logit.E0","logit.I0","logit.Q0","logit.H10","logit.H20","logit.H30")] <- logit(c(S0,E0,I0,Q0,H10,H20,H30))

# log-transformed parameters

log.par <- c(
  "log.muEI", "log.muIH", "log.muHI", "log.muIQ", "log.muIS", "log.muQS", "log.tau",
  "log.sigPRO", "log.sigOBS", "log.K0", "log.F0"
)
# logit-transformed parameters
logit.par <- c(
  "logit.rho", "logit.q", "logit.br", "logit.S0", "logit.E0", "logit.I0", "logit.Q0",
  "logit.H10", "logit.H20", "logit.H30"
)
# untransformed parameters
untr.par <- c("b1", "b2", "b3", "b4", "b5", "b6", "delta", "initpop")
# untransformed initial parameters
par.ini <- c(exp(par.ini.tr[log.par]),expit(par.ini.tr[logit.par]),par.ini.tr[untr.par])
names(par.ini) <- c(
  "muEI", "muIH", "muHI", "muIQ", "muIS", "muQS", "tau", "sigPRO", "sigOBS", "K0", "F0", "rho",
  "q", "br", "S0", "E0", "I0", "Q0", "H10", "H20", "H30", "b1", "b2", "b3", "b4", "b5", "b6",
  "delta", "initpop"
)

# parameters to be estimated
par.est <- c(
  "log.muEI", "log.muIH", "log.muHI", "log.muIQ", "log.muIS", "log.muQS", "log.sigPRO", "log.sigOBS",
  "log.tau", "logit.rho", "logit.q", "logit.br", "b1", "b2", "b3", "b4", "b5", "b6"
)
# initial states to be estimated
ivp.est <- c("logit.S0", "logit.E0", "logit.I0", "logit.Q0", "logit.H10", "logit.H20", "logit.H30", "log.K0", "log.F0")

# strength of random walk
sd <- rep(0,length(par.ini.tr))
names(sd) <- names(par.ini.tr)
sd[par.est] <- 0.1
sd[ivp.est] <- 2

# parameters to be held fixed at pre-assigned value
# vivax incubation period ~= 15 days (=15/365 yr); q takes a low value <<1 
par.ini.tr[c("log.muEI","logit.q")] <- c(log(24),logit(0.001))
sd[c("log.muEI","logit.q")] <- 0.000001
par.tr <- par.ini.tr

  m <- try(
    is2(
    po,
    Nis = NMIF,
    start = par.tr,
    pars = par.est,
    ivps = ivp.est,
    rw.sd = sd,
    Np = NP,
    var.factor = 1,
    ic.lag = 10,
    cooling.type="geometric",
    cooling.fraction=0.1,		
    max.fail = 1000,
    method="is2",
    lag=1
    
  )
  )
  if(class(m)[1]=='try-error'){
    list(pomp=po,start=par.tr,ll=NA)
  } else{
    ll <- logLik(pfilter(m,Np=NPLIK))
    ll1 <-m$loglik
    list(pomp=m,start=par.tr,ll=ll, ll1=ll1)
  }
}
toc <- Sys.time()
etime3 <- toc-tic

m3.in <- rbind(sapply(mpar3,function(x)x$start))
m3.out <- rbind(sapply(mpar3,function(x)coef(x$pomp)))
m3.lik <- rbind(sapply(mpar3,function(x)x$ll))

#########################
# run RIS1 
#########################


METHOD <- "ris1"
IC.LAG <- 1000
tic <- Sys.time()
mpar4 <- foreach(
  i=1:JOBS,
  .packages='is2',
  .inorder=FALSE
) %dopar% {
  
  set.seed(345+i)
  


# randomize (and transform where needed) initial parameter values
# ("b1...b6" are untransformed, "delta" and "initpop" not estimated)
par.ini.tr <- c(
  log.muEI=log(24), log.muIH=log(runif(1,1,5)), log.muHI=log(runif(1,1,5)),
  log.muIQ=log(runif(1,1,2)), log.muIS=log(runif(1,0.5,2)), log.muQS=log(runif(1,10,20)),
  log.sigPRO=log(runif(1,0.1,0.5)), log.sigOBS=log(runif(1,0.1,0.5)), log.tau=log(runif(1,0.1,0.5)),
  log.K0=log(runif(1,0.1,0.5)), log.F0=log(runif(1,0.1,0.5)),
  logit.rho=logit(runif(1,0.001,0.01)), logit.q=logit(0.001), logit.br=logit(runif(1,0.5,0.9)),
  logit.S0=0, logit.E0=0, logit.I0=0, logit.Q0=0, logit.H10=0, logit.H20=0, logit.H30=0,
  b1=runif(1,-5,5), b2=runif(1,-5,5), b3=runif(1,-5,5), b4=runif(1,-5,5),
  b5=runif(1,-5,5), b6=runif(1,-5,5), delta=0.02, initpop=1163607
)
# randomize S0,E0,I0,Q0,H0 with constraint S0+E0+I0+Q0+H0=1
S0  <- runif(1,0,1);
E0  <- runif(1,0,1)
I0  <- runif(1,0,1)
Q0  <- runif(1,0,1)
H10 <- runif(1,0,1)
H20 <- runif(1,0,1)
H30 <- runif(1,0,1)
fac <- sum(c(S0,E0,I0,Q0,H10,H20,H30))
S0 <- S0/fac; E0 <- E0/fac; I0 <- I0/fac; Q0 <- Q0/fac; H10 <- H10/fac; H20 <- H20/fac; H30 <- H30/fac
par.ini.tr[c("logit.S0","logit.E0","logit.I0","logit.Q0","logit.H10","logit.H20","logit.H30")] <- logit(c(S0,E0,I0,Q0,H10,H20,H30))

# log-transformed parameters

log.par <- c(
  "log.muEI", "log.muIH", "log.muHI", "log.muIQ", "log.muIS", "log.muQS", "log.tau",
  "log.sigPRO", "log.sigOBS", "log.K0", "log.F0"
)
# logit-transformed parameters
logit.par <- c(
  "logit.rho", "logit.q", "logit.br", "logit.S0", "logit.E0", "logit.I0", "logit.Q0",
  "logit.H10", "logit.H20", "logit.H30"
)
# untransformed parameters
untr.par <- c("b1", "b2", "b3", "b4", "b5", "b6", "delta", "initpop")
# untransformed initial parameters
par.ini <- c(exp(par.ini.tr[log.par]),expit(par.ini.tr[logit.par]),par.ini.tr[untr.par])
names(par.ini) <- c(
  "muEI", "muIH", "muHI", "muIQ", "muIS", "muQS", "tau", "sigPRO", "sigOBS", "K0", "F0", "rho",
  "q", "br", "S0", "E0", "I0", "Q0", "H10", "H20", "H30", "b1", "b2", "b3", "b4", "b5", "b6",
  "delta", "initpop"
)

# parameters to be estimated
par.est <- c(
  "log.muEI", "log.muIH", "log.muHI", "log.muIQ", "log.muIS", "log.muQS", "log.sigPRO", "log.sigOBS",
  "log.tau", "logit.rho", "logit.q", "logit.br", "b1", "b2", "b3", "b4", "b5", "b6"
)
# initial states to be estimated
ivp.est <- c("logit.S0", "logit.E0", "logit.I0", "logit.Q0", "logit.H10", "logit.H20", "logit.H30", "log.K0", "log.F0")

# strength of random walk
sd <- rep(0,length(par.ini.tr))
names(sd) <- names(par.ini.tr)
sd[par.est] <- 0.5
sd[ivp.est] <- 2

# parameters to be held fixed at pre-assigned value
# vivax incubation period ~= 15 days (=15/365 yr); q takes a low value <<1 
par.ini.tr[c("log.muEI","logit.q")] <- c(log(24),logit(0.001))
sd[c("log.muEI","logit.q")] <- 0.000001
par.tr <- par.ini.tr

  m <- try(
    is2(
    po,
    Nis = NMIF,
    start = par.tr,
    pars = par.est,
    ivps = ivp.est,
    rw.sd = sd,
    Np = NP,
    var.factor = 1,
    ic.lag = 10,
    cooling.type="geometric",
    cooling.fraction=0.1,		
    max.fail = 1000,
    method="ris1",
    lag=1
    
  )
  )
  if(class(m)[1]=='try-error'){
    list(pomp=po,start=par.tr,ll=NA)
  } else{
    ll <- logLik(pfilter(m,Np=NPLIK))
    ll1 <-m$loglik
    list(pomp=m,start=par.tr,ll=ll, ll1=ll1)
  }
}
toc <- Sys.time()
etime4 <- toc-tic

m4.in <- rbind(sapply(mpar4,function(x)x$start))
m4.out <- rbind(sapply(mpar4,function(x)coef(x$pomp)))
m4.lik <- rbind(sapply(mpar4,function(x)x$ll))


#########################
# run IS1 
#########################


METHOD <- "aif"
IC.LAG <- 1000
tic <- Sys.time()
mpar5 <- foreach(
  i=1:JOBS,
  .packages='is2',
  .inorder=FALSE
) %dopar% {
  
  set.seed(345+i)
  


# randomize (and transform where needed) initial parameter values
# ("b1...b6" are untransformed, "delta" and "initpop" not estimated)
par.ini.tr <- c(
  log.muEI=log(24), log.muIH=log(runif(1,1,5)), log.muHI=log(runif(1,1,5)),
  log.muIQ=log(runif(1,1,2)), log.muIS=log(runif(1,0.5,2)), log.muQS=log(runif(1,10,20)),
  log.sigPRO=log(runif(1,0.1,0.5)), log.sigOBS=log(runif(1,0.1,0.5)), log.tau=log(runif(1,0.1,0.5)),
  log.K0=log(runif(1,0.1,0.5)), log.F0=log(runif(1,0.1,0.5)),
  logit.rho=logit(runif(1,0.001,0.01)), logit.q=logit(0.001), logit.br=logit(runif(1,0.5,0.9)),
  logit.S0=0, logit.E0=0, logit.I0=0, logit.Q0=0, logit.H10=0, logit.H20=0, logit.H30=0,
  b1=runif(1,-5,5), b2=runif(1,-5,5), b3=runif(1,-5,5), b4=runif(1,-5,5),
  b5=runif(1,-5,5), b6=runif(1,-5,5), delta=0.02, initpop=1163607
)
# randomize S0,E0,I0,Q0,H0 with constraint S0+E0+I0+Q0+H0=1
S0  <- runif(1,0,1);
E0  <- runif(1,0,1)
I0  <- runif(1,0,1)
Q0  <- runif(1,0,1)
H10 <- runif(1,0,1)
H20 <- runif(1,0,1)
H30 <- runif(1,0,1)
fac <- sum(c(S0,E0,I0,Q0,H10,H20,H30))
S0 <- S0/fac; E0 <- E0/fac; I0 <- I0/fac; Q0 <- Q0/fac; H10 <- H10/fac; H20 <- H20/fac; H30 <- H30/fac
par.ini.tr[c("logit.S0","logit.E0","logit.I0","logit.Q0","logit.H10","logit.H20","logit.H30")] <- logit(c(S0,E0,I0,Q0,H10,H20,H30))

# log-transformed parameters

log.par <- c(
  "log.muEI", "log.muIH", "log.muHI", "log.muIQ", "log.muIS", "log.muQS", "log.tau",
  "log.sigPRO", "log.sigOBS", "log.K0", "log.F0"
)
# logit-transformed parameters
logit.par <- c(
  "logit.rho", "logit.q", "logit.br", "logit.S0", "logit.E0", "logit.I0", "logit.Q0",
  "logit.H10", "logit.H20", "logit.H30"
)
# untransformed parameters
untr.par <- c("b1", "b2", "b3", "b4", "b5", "b6", "delta", "initpop")
# untransformed initial parameters
par.ini <- c(exp(par.ini.tr[log.par]),expit(par.ini.tr[logit.par]),par.ini.tr[untr.par])
names(par.ini) <- c(
  "muEI", "muIH", "muHI", "muIQ", "muIS", "muQS", "tau", "sigPRO", "sigOBS", "K0", "F0", "rho",
  "q", "br", "S0", "E0", "I0", "Q0", "H10", "H20", "H30", "b1", "b2", "b3", "b4", "b5", "b6",
  "delta", "initpop"
)

# parameters to be estimated
par.est <- c(
  "log.muEI", "log.muIH", "log.muHI", "log.muIQ", "log.muIS", "log.muQS", "log.sigPRO", "log.sigOBS",
  "log.tau", "logit.rho", "logit.q", "logit.br", "b1", "b2", "b3", "b4", "b5", "b6"
)
# initial states to be estimated
ivp.est <- c("logit.S0", "logit.E0", "logit.I0", "logit.Q0", "logit.H10", "logit.H20", "logit.H30", "log.K0", "log.F0")

# strength of random walk
sd <- rep(0,length(par.ini.tr))
names(sd) <- names(par.ini.tr)
sd[par.est] <- 0.1
sd[ivp.est] <- 2

# parameters to be held fixed at pre-assigned value
# vivax incubation period ~= 15 days (=15/365 yr); q takes a low value <<1 
par.ini.tr[c("log.muEI","logit.q")] <- c(log(24),logit(0.001))
sd[c("log.muEI","logit.q")] <- 0.000001
par.tr <- par.ini.tr

  m <- try(
    is2(
    po,
    Nis = NMIF,
    start = par.tr,
    pars = par.est,
    ivps = ivp.est,
    rw.sd = sd,
    Np = NP,
    var.factor = 1,
    ic.lag = 10,
    cooling.type="geometric",
    cooling.fraction=0.1,		
    max.fail = 1000,
    method="aif",
    lag=1
    
  )
  )
  if(class(m)[1]=='try-error'){
    list(pomp=po,start=par.tr,ll=NA)
  } else{
    ll <- logLik(pfilter(m,Np=NPLIK))
    ll1 <-m$loglik
    list(pomp=m,start=par.tr,ll=ll, ll1=ll1)
  }
}
toc <- Sys.time()
etime5 <- toc-tic

m5.in <- rbind(sapply(mpar5,function(x)x$start))
m5.out <- rbind(sapply(mpar5,function(x)coef(x$pomp)))
m5.lik <- rbind(sapply(mpar5,function(x)x$ll))



save(m1.in,m1.out,m1.lik,etime1,
		 m2.in,m2.out,m2.lik,etime2,
		 m3.in,m3.out,m3.lik,etime3,
		 m4.in,m4.out,m4.lik,etime4,
		 m5.in,m5.out,m5.lik,etime5,
     file="malaria-50-1000.rda",compress='xz')
}


load("malaria-50-1000.rda")

m1.lik<-m1.lik[is.finite(m1.lik)]
m2.lik<-m2.lik[is.finite(m2.lik)]
m3.lik<-m3.lik[is.finite(m3.lik)]
m4.lik<-m4.lik[is.finite(m4.lik)]
m5.lik<-m5.lik[is.finite(m5.lik)]


res1<-m1.lik
res2<-m2.lik
res3<-m3.lik
res4<-m4.lik
res5<-m5.lik

MLE<-max(res1,res2,res3,res4, res5)

pdf("compareAIFmalaria.pdf")

s1<-log(MLE-res1)

k1<- density(s1, bw=0.5)
L1<- MLE-exp(k1$x)

plot(L1,k1$y/exp(k1$x), main="",type="l",lty=2, col=2, lwd=2, axes=T,xlab='',ylab='', xlim=c(-2200,-1700),ylim=c(0,0.03))


s2<-log(MLE-res2)
k2<- density(s2, bw=0.5)
L2<- MLE-exp(k2$x)
lines(L2,k2$y/exp(k2$x), main="",lty=1, col=1, lwd=2,axes=T,xlab='',ylab='', ylim=c(0,0.03), xlim=c(-2200,-1700))

s3<-log(MLE-res3)
k3<- density(s3, bw=0.5)
L3<- MLE-exp(k3$x)
lines(L3,k3$y/exp(k3$x), main="",lty=4, col=4, lwd=2,axes=T,xlab='',ylab='', ylim=c(0,0.03), xlim=c(-2200,-1700))

s5<-log(MLE-res5)
k5<- density(s5, bw=0.5)
L5<- MLE-exp(k5$x)
lines(L5,k5$y/exp(k5$x), main="",lty=6, col=6, lwd=2,axes=T,xlab='',ylab='', ylim=c(0,0.03), xlim=c(-2200,-1700))



abline(v = MLE, col = "darkblue", lwd=2, lty=5)

XLIM <- c(-2200,-1700)
YLIM <- c(0,0.03)
LINE.YAXIS <- 2
LINE.XAXIS <- 2.5
X.LABEL <- 0.87
Y.LABEL <- 0.87  

CEX.TRIANGLE <- CEX.SQUARE <- 1.5
CEX.POINTS <- 1.5
CEX.LAB <- 0.9
CEX.AXIS <- 0.9

CEX.TRIANGLE <- CEX.SQUARE <- 1
CEX.POINTS <- 1
CEX.LAB <- 1.2
CEX.AXIS <- 0.9
CEX.AXIS.NUMBERS <- 1


box()
axis(side=1,cex=CEX.AXIS.NUMBERS)
mtext(side=1,bquote("log likelihood"),line=LINE.XAXIS,cex=CEX.AXIS)

abline(h=0)
legend(-2200,0.03, c("IF1","IF2", "IS2", "AIF"), col = c(2,1,4,6),
        lty = c(2, 1, 4, 6),
       merge = TRUE, bg = "gray90")
plot.window(c(0,1),c(0,1))
dev.off()
